" Configuration related to plugins
" --------------------------------
"
" This file should be loaded only if the &loadplugins options is set
" If we start up vim with --noplugins then we get faster startup, but some of
" the commands in this file might error if the plugins aren't loaded.


" vim-jsx-typescript
" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

hi tsxTagName guifg=#E06C75
hi tsxCloseString guifg=#F99575
hi tsxCloseTag guifg=#F99575
hi tsxAttributeBraces guifg=#F99575
hi tsxEqual guifg=#F99575
hi tsxAttrib guifg=#F8BD7F cterm=italic

" NEOFORMAT
let g:neoformat_only_msg_on_error = 1

" NERDTree
let NERDTreeQuitOnOpen=1 " Close NERDTree After Opening File
let NERDTreeShowHidden=1
let NERDTreeMapOpenVSplit='v'
let NERDTreeMapOpenSplit='s'
let NERDTreeHijackNetrw='0'
let NERDTreeIgnore=['\~$', '.*\.pyc$', 'pip-log\.txt$', '^.git$', '^.DS_Store$']
let NERDTreeMouseMode=2
let NERDTreeWinSize=45
let NERDTreeDirArrows=1
let NERDTreeCasadeOpenSingleChildDir=1
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.bak$', '\~$']
"autocmd vimenter * if !argc() | NERDTree | endif " open NERD tree automatically if no files are specified
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
            " ^^ if NERD Tree is the only open buffer, close vim

" FZF
let g:fzf_layout = { 'down': '40%' }

" vim-json settings
let g:vim_json_syntax_conceal = 0

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" signature plugin
" Not config for the plugin, just coloring for it.
hi! link SignColumn LineNr

" Gundo
nnoremap <leader>g :GundoToggle<CR>
let g:gundo_preview_bottom = 1

" Supertab settings
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabLongestHighlight = 1


" Syntastic settings
let g:syntastic_scss_sass_args="--load-path ./bower_components"

let g:syntastic_javascript_jshint_conf="~/.jshintrc"

let g:syntastic_coffee_coffeelint_args="--csv -f ~/.vim/syntastic_configs/coffeelint"
" let g:syntastic_coffee_coffeelint_tail="
let g:syntastic_html_tidy_ignore_errors = [
    \ "proprietary attribute",
\ ]

" Markdown block highlighting
let g:markdown_fenced_languages = ['ruby', 'coffeescript=coffee', 'coffee', 'html', 'haml', 'javascript']

" vim-jsx specific settings
let g:syntastic_javascript_checkers = ['jsxhint']
let g:syntastic_javascript_jsxhint_exec = 'jsx-jshint-wrapper'


let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'filename' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'readonly', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'filename': 'LightlineFilename',
      \   'readonly': 'LightlineReadonly',
      \   'gitbranch': 'fugitive#head'
      \ },
      \ 'component': {
      \   'charvaluehex': '0x%B'
      \ },
      \ }

function! LightlineFilename()
  let filename = expand('%:f') !=# '' ? expand('%:f') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return filename . modified
endfunction

function! LightlineReadonly()
	return &readonly && &filetype !=# 'help' ? 'RO' : ''
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

let g:ale_echo_cursor = 1
let g:ale_virtualtext_cursor = 0
let g:ale_set_balloons = 1
let g:ale_sign_error = '●' " Less aggressive than the default '>>'
let g:ale_sign_warning = '.'
let g:ale_fix_on_save = 1
let g:ale_lint_on_enter = 1 " 0 may be quicker/better for opening new files?
let g:ale_linters_explicit = 1
let g:ale_fixers = {
\   'css': [ 'prettier', 'eslint' ],
\   'less': [ 'prettier', 'eslint' ],
\   'javascript': [ 'prettier', 'eslint' ],
\   'javascript.jsx': [ 'prettier', 'eslint' ],
\   'typescript': [ 'prettier', 'tslint' ],
\   'typescript.jsx': [ 'prettier', 'tslint' ],
\   'markdown.mdx': [ 'prettier', 'tslint' ]
\}
let g:ale_linters = {
\   'javascript': [ 'eslint' ],
\   'javascript.jsx': [ 'eslint' ],
\   'typescript': [ 'tsserver', 'tslint' ],
\   'typescript.tsx': [ 'tsserver', 'tslint' ],
\   'markdown.mdx': [ 'eslint' ],
\   'vue': [ 'eslint' ]
\}

" deoplete
let g:deoplete#enable_at_startup = 1

" Taboo Settings
set sessionoptions+=tabpages,globals
